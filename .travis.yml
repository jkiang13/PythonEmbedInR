# travis R support is not great, it is not supported on windows and on mac it
# installs from brew (slow) rather than a binary package. R from brew also
# will not install from binary CRAN packages by default. so we instead use
# a generic bash base and install packages ourselves.
language: bash

matrix:
  include:

    - os: linux
      dist: bionic
      env:
        R_VERSION: 3.6.3

    - os: linux
      dist: bionic
      env:
        R_VERSION: 4.0.2

    - os: macosx
      osx_image: xcode11.3
      env:
        R_VERSION: 3.6.3

    - os: macosx
      osx_image: xxcode11.3
      env:
        R_VERSION: 4.0.2

    - os: windows
      env:
        R_VERSION: 3.6.3

    - os: windows
      env:
        R_VERSION: 4.0.2

before_install:
   - |
    echo "Installing R $R_VERSION dependencies"

    R_MAJOR_VERSION=$(echo $R_VERSION | cut -f1 -d".")

    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      # on linux we need to add the R apt servers

      if [[ "$R_MAJOR_VERSION" == "4" ]]; then
        CRAN_VERSION="40"
      else
        # 3.5 and 3.6 both use "35" repos...
        CRAN_VERSION="35"
      fi

      echo "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran${CRAN_VERSION}/" | sudo tee /etc/apt/sources.list.d/rcran.list >> /dev/null
      echo "deb-src https://cloud.r-project.org/bin/linux/ubuntu bionic-cran${CRAN_VERSION}/" | sudo tee -a /etc/apt/sources.list.d/rcran.list >> /dev/null
      sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
      sudo apt-get update

    elif [ "$TRAVIS_OS_NAME" == "windows" ]; then
      echo $(which curl)
      echo $(curl --version)

      # on windows we need to install the appropriate set of R tools

      if [ "$R_MAJOR_VERSION" == "4" ]; then
        R_TOOLS_FILE="rtools40-x86_64.exe"
        R_TOOLS_BIN="c:/rtools40/usr/bin"
      else
        R_TOOLS_FILE="Rtools35.exe"
        R_TOOLS_BIN="c:/Rtools/bin"
      fi

      curl -O "https://cran.r-project.org/bin/windows/Rtools/${R_TOOLS_FILE}"

      echo "start /wait $R_TOOLS_FILE /VERYSILENT" > install_rtools.bat
      ./install_rtools.bat

      export PATH=$PATH:$(echo "/${R_TOOLS_BIN}" | tr -d ":")
    fi



install:
  - |
    echo "Installing R $R_VERSION"

    R_LIBS=${TRAVIS_BUILD_DIR}/R_LIBS
    echo $R_LIBS

    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      PKG_VERSION=$(apt-cache madison r-base | grep $R_VERSION | head -1 | cut -f2 -d"|" | xargs)
      sudo apt-get install -y r-base=$PKG_VERSION

    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      R_INSTALLER_FILE="R-${R_VERSION}.pkg"
      R_INSTALLER_URL="https://cloud.r-project.org/bin/macosx/${R_INSTALLER_FILE}"
      curl -O $R_INSTALLER_URL
      sudo installer -pkg $R_INSTALLER_FILE -target /

    elif [ "$TRAVIS_OS_NAME" == "windows" ]; then
      echo $(which curl)
      echo $(curl --version)
      R_DIR="C:/R/R-${R_VERSION}"
      R_INSTALLER_FILE="R-${R_VERSION}-win.exe"
      # conveniently even the current version is available under "old"
      R_INSTALLER_URL="https://cloud.r-project.org/bin/windows/base/old/${R_VERSION}/${R_INSTALLER_FILE}"
      curl -O $R_INSTALLER_URL

      echo "start /wait $R_INSTALLER_FILE /VERYSILENT /DIR=$R_DIR" > install_r.bat
      echo "about to running R installer"
      ./install_r.bat
      echo "done with R installer"

      export PATH=$PATH:$(echo "/${R_DIR}" | tr -d ":")/bin

      #R_LIBS=$(echo $TRAVIS_BUILD_DIR | sed 's/\\/\//g')/R_LIBS

      # R won't understand a windows bash path of the form /c/foo
      # so convert to c:/foo
      R_LIBS_NATIVE=$(echo $R_LIBS | awk 'NR==1,/\/c\//{sub(/\/c\//, "c:/")} 1')

    else
      echo "Unknown TRAVIS_OS_NAME $TRAVIS_OS_NAME"
      exit 1

    fi

    mkdir -p $R_LIBS
    R_LIBS_NATIVE=${R_LIBS_NATIVE:-$R_LIBS}
    echo "R_LIBS_NATIVE $R_LIBS_NATIVE"

    # install our R package dependencies
    echo "installing R dependencies"
    echo "list.of.packages <- c('pack', 'R6', 'testthat', 'rjson', 'rlang');" >> installReqPkgs.R
    echo "if(length(list.of.packages)) install.packages(list.of.packages, lib='$R_LIBS_NATIVE', repos='http://cran.fhcrc.org')" >> installReqPkgs.R
    R --vanilla < installReqPkgs.R 

script:
  - |
    echo "Building package"

    PACKAGE_NAME="PythonEmbedInR"
    PACKAGE_VERSION=0.0.0

    R_LIBS=${TRAVIS_BUILD_DIR}/R_LIBS 
    R_LIBS_NATIVE=$(echo $R_LIBS | awk 'NR==1,/\/c\//{sub(/\/c\//, "c:/")} 1')

    echo "R_LIBS $R_LIBS"
    echo $(R --version)

    echo "building R package"
    echo "done building R package"
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      R CMD build ./
      R CMD INSTALL ./ --library=$R_LIBS --no-test-load

    elif [ "$TRAVIS_OS_NAME" == "osx" ]; then
      R CMD build ./ 
      R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load

      ## Now fix the binaries, per SYNR-341:
      # it's v 3.0 or greater, with just one platform
      mkdir -p ${PACKAGE_NAME}/libs
      cp $R_LIBS/${PACKAGE_NAME}/libs/PythonEmbedInR.so ${PACKAGE_NAME}/libs
      install_name_tool -change "/Library/Frameworks/R.framework/Versions/${R_VERSION}/Resources/lib/libR.dylib"  "/Library/Frameworks/R.framework/Versions/Current/Resources/lib/libR.dylib" ${PACKAGE_NAME}/libs/PythonEmbedInR.so
      # update archive with modified binaries
      for f in *.tgz
      do
        prefix="${f%.*}"
        gunzip "$f"
        # Note, >=3.0 there is only one platform
        tar -rf "$prefix".tar ${PACKAGE_NAME}/libs/PythonEmbedInR.so
        rm "$prefix".tar.gz
        gzip "$prefix".tar
        mv "$prefix".tar.gz "$prefix".tgz
      done

    elif [ "$TRAVIS_OS_NAME" == "windows" ]; then
      echo "R CMD build ./" > build.bat
      echo "R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load --merge-multiarch" >> build.bat
      ./build.bat

    else
      echo "Unknown TRAVIS_OS_NAME $TRAVIS_OS_NAME"
      exit 1

    fi

    echo "Running tests"
    echo "$R_LIBS_NATIVE"
    echo ".libPaths(c('$R_LIBS_NATIVE', .libPaths()));" > runTests.R
    echo "setwd(sprintf('%s/tests', getwd()));" >> runTests.R
    echo "source('testthat.R')" >> runTests.R
    echo "library(PythonEmbedInR);" >> runTests.R
    echo "detach(\"package:PythonEmbedInR\", unload=TRUE);" >> runTests.R
    echo "library(PythonEmbedInR)" >> runTests.R

    echo "R --vanilla < runTests.R" > runTests.bat
    ./runTests.bat

