# build PythonEmbedInR, and deploy to S3 RAN server if conditions merit.
# at this point experimental

name: build

on:
  push:
    # we build/test all pushed branches, but not tags.
    # we only push tags with releases, and we handle releases explicitly
    branches:
      - '**'
    tags-ignore:
      - '**'

  pull_request:

  release:
    types:
      - 'published'

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, windows-2019, macos-mojave]
        r: [4.0.5, 4.1.0]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: shared-env
        shell: bash
        run: |
          PACKAGE_NAME=PythonEmbedInR
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

          PACKAGE_VERSION=$(grep "Version: " DESCRIPTION | awk '{print $2'})

          # if this was triggered by a release and the release tag
          # looks like semver then we use that for the package version.
          RELEASE_TAG=${{ github.event.release.tag_name }}
          if [[ $RELEASE_TAG =~ ^v?([[:digit:]\.]+)(-rc)? ]]; then
            RELEASE_VERSION="${BASH_REMATCH[1]}"

            # a release version overrides the package version
            # for purposes of creating artifacts
            PACKAGE_VERSION=$RELEASE_VERSION

            DATE=`date +%Y-%m-%d`
            # replace DESCRIPTION with $VERSION & $DATE
            # sed -i not portable on OSX so we wash through some temp files instead
            sed "s|^Version: .*$|Version: $PACKAGE_VERSION|g" DESCRIPTION > DESCRIPTION.temp
            sed "s|^Date: .*$|Date: $DATE|g" DESCRIPTION.temp > DESCRIPTION2.temp

            rm DESCRIPTION
            mv DESCRIPTION2.temp DESCRIPTION
            rm DESCRIPTION.temp
          fi

          echo "BRANCH_VERSION=$BRANCH_VERSION" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

          R_VERSION=${{matrix.r}}
          R_MAJOR_VERSION=$(echo $R_VERSION | cut -f1 -d".")
          R_MINOR_VERSION=$R_MAJOR_VERSION.$(echo $R_VERSION | cut -f2 -d".")
          echo "R_VERSION=$R_VERSION" >> $GITHUB_ENV
          echo "R_MAJOR_VERSION=$R_MAJOR_VERSION" >> $GITHUB_ENV
          echo "R_MINOR_VERSION=$R_MINOR_VERSION" >> $GITHUB_ENV

      - uses: actions/checkout@master
      - name: Setup R
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.r }}

      - name: install-R-lib-deps
        shell: bash
        run: |
          echo "list.of.packages <- c('pack', 'R6', 'testthat', 'rjson', 'rlang');" >> installReqPkgs.R
          echo "if(length(list.of.packages)) install.packages(list.of.packages, repos='http://cran.fhcrc.org', destdir=\"${R_LIBS}\")" >> installReqPkgs.R
          R --vanilla < installReqPkgs.R

      - name: linux-build-package
        if: ${{runner.os == 'Linux'}}
        run: |
          R CMD build ./
          R CMD INSTALL ./ --library=$R_LIBS --no-test-load

          echo "ARTIFACT_EXTENSION=tar.gz" >> $GITHUB_ENV

      - name: mac-build-package
        if: ${{runner.os == 'macOS'}}
        run: |
            #  # need some additional headers (zlib) on catalina to compile python
            #  # https://stackoverflow.com/a/58349403
            #  for HEADER_PATH in /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/*
            #  do
            #    INCLUDE_PATH="/usr/local/include/$(basename $HEADER_PATH)"
            #    if [ ! -f $INCLUDE_PATH ]; then
            #      sudo ln -s $HEADER_PATH $INCLUDE_PATH 
            #    fi
            #  done

            R CMD build ./

            R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load

            ## Now fix the binaries, per SYNR-341:
            # it's v 3.0 or greater, with just one platform
            mkdir -p ${PACKAGE_NAME}/libs
            cp $R_LIBS/${PACKAGE_NAME}/libs/PythonEmbedInR.so ${PACKAGE_NAME}/libs
            install_name_tool -change "/Library/Frameworks/R.framework/Versions/${R_MINOR_VERSION}/Resources/lib/libR.dylib"  "/Library/Frameworks/R.framework/Versions/Current/Resources/lib/libR.dylib" ${PACKAGE_NAME}/libs/PythonEmbedInR.so

            # update archive with modified binaries
            for f in *.tgz
            do
              prefix="${f%.*}"
              gunzip "$f"
              # Note, >=3.0 there is only one platform
              tar -rf "$prefix".tar ${PACKAGE_NAME}/libs/PythonEmbedInR.so
              rm "$prefix".tar.gz
              gzip "$prefix".tar
              mv "$prefix".tar.gz "$prefix".tgz
            done

            echo "ARTIFACT_EXTENSION=tgz" >> $GITHUB_ENV

      - name: windows-build-package
        if: ${{runner.os == 'Windows'}}
        shell: bash
        run: |
          R CMD build ./
          R CMD INSTALL --build ${PACKAGE_NAME}_${PACKAGE_VERSION}.tar.gz --library=$R_LIBS --no-test-load --merge-multiarch

          echo "ARTIFACT_EXTENSION=zip" >> $GITHUB_ENV

      - name: run-tests
        shell: bash
        run: |
          echo ".libPaths(c('$R_LIBS', .libPaths()));" > runTests.R
          echo "setwd(sprintf('%s/tests', getwd()));" >> runTests.R
          echo "source('testthat.R')" >> runTests.R
          echo "library(PythonEmbedInR);" >> runTests.R
          echo "detach(\"package:PythonEmbedInR\", unload=TRUE);" >> runTests.R
          echo "library(PythonEmbedInR)" >> runTests.R
          R --vanilla < runTests.R

      - name: artifact-name
        shell: bash
        run: |
          # we format our artifact names so we align to the same pattern
          # used by the deploy gist written to work with jenkins.

          ARTIFACT_NAME="${PACKAGE_NAME}_${PACKAGE_VERSION}.${ARTIFACT_EXTENSION}"

          OS_LABEL=$(echo ${{runner.os}} | tr '[:upper:]' '[:lower:]')
          if [[ "$OS_LABEL" == "macos" ]]; then
            OS_LABEL="mac"
          fi

          # only the first two parts of the version here, e.g. 3.6
          RVERS=$(echo $R_VERSION | awk -F"." '{print $1"."$2}')

          UPLOAD_NAME="label=${OS_LABEL}-RVERS-${RVERS}"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "UPLOAD_NAME=$UPLOAD_NAME" >> $GITHUB_ENV

      - name: upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.UPLOAD_NAME}}
          path: ${{env.ARTIFACT_NAME}}

  deploy:
    runs-on: ubuntu-18.04
    needs: build

    steps:
      - name: check-deployment-target
        id: check-deployment-target
        if: ${{github.event.action == 'published'}}
        shell: bash
        run: |
          DEPLOY_TARGET=""
          RELEASE_VERSION=""
          RELEASE_TAG=${{ github.event.release.tag_name }}
          if [[ $RELEASE_TAG =~ ^v?([[:digit:]\.]+)(-rc)? ]]; then
            RELEASE_VERSION="${BASH_REMATCH[1]}"
            echo $RELEASE_VERSION
            if [[ -n "$RELEASE_VERSION" ]]; then
              if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
                DEPLOY_TARGET="staging"
              else
                DEPLOY_TARGET="prod"
              fi
            fi
          fi

          echo "DEPLOY_TARGET=$DEPLOY_TARGET" >> $GITHUB_ENV
          echo "::set-output name=deploy_target::$DEPLOY_TARGET"

      - name: download-artifacts
        uses: actions/download-artifact@v2
        if: ${{steps.check-deployment-target.outputs.deploy_target != ''}}
        with:
          path: deploy_artifacts

      - name: deploy-to-target
        if: ${{steps.check-deployment-target.outputs.deploy_target != ''}}
        shell: bash
        run: |
          # we use a gist to upload and the gist internally uses R so we need R on this runner.
          # TODO maybe create a docker image to run this with R preloaded (and/or an action).
          sudo apt-get -y update && sudo apt-get -y install r-base

          export ARTIFACTS_DIR=deploy_artifacts
          if [[ "$DEPLOY_TARGET" == "staging" ]]; then
            export AWS_ACCESS_KEY_ID=${{secrets.S3_RAN_STAGING_AWS_ACCESS_KEY_ID}}
            export AWS_SECRET_ACCESS_KEY=${{secrets.S3_RAN_STAGING_AWS_SECRET_ACCESS_KEY}}
            export AWS_DEFAULT_REGION=us-east-1
            export S3_RAN=staging-ran.synapse.org
          elif [[ "$DEPLOY_TARGET" == "prod" ]]; then
            export AWS_ACCESS_KEY_ID=${{secrets.S3_RAN_PROD_AWS_ACCESS_KEY_ID}}
            export AWS_SECRET_ACCESS_KEY=${{secrets.S3_RAN_PROD_AWS_SECRET_ACCESS_KEY}}
            export AWS_DEFAULT_REGION=us-east-1
            export S3_RAN=ran.synapse.org
          fi

          curl -s https://raw.githubusercontent.com/Sage-Bionetworks/CI-Build-Tools/master/r-pkg/deploy.sh | bash

  # on each of our matrix platforms, download the newly uploaded package from RAN
  check-deploy:
    needs: deploy

    strategy:
      matrix:
        os: [ubuntu-18.04, macos-mojave, windows-2019]
        r: [4.0.5, 4.1.0] 

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: check-pypi
        shell: bash
        run: |
          if [[ "${{ github.event.release.prerelease}}" == "false" ]]; then
            PYPI_INDEX_URL="https://pypi.org/simple/"
          else
            PYPI_INDEX_URL="https://test.pypi.org/simple/"
          fi
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          if [[ $RELEASE_TAG =~ ^v?([[:digit:]\.]+)(-rc)? ]]; then
            VERSION="${BASH_REMATCH[1]}"
            if [[ "${{ github.event.release.prerelease}}" == "true" ]]; then
              VERSION="$VERSION.$GITHUB_RUN_NUMBER"
            fi
          else
            echo "Unrecognized release tag"
            exit 1
          fi
          # it can take some time for the packages to become available in pypi after uploading
          for i in 5 10 20 40; do
            if pip3 install --index-url $PYPI_INDEX_URL --extra-index-url https://pypi.org/simple "synapseclient==$VERSION"; then
              ACTUAL_VERSION=$(synapse --version)
              if [ -n "$(echo "$ACTUAL_VERSION" | grep -oF "$VERSION")" ]; then
                echo "Successfully installed version $VERSION"
                exit 0
              else
                echo "Expected version $VERSION, found $ACTUAL_VERSION instead"
                exit 1
              fi
            fi
            sleep $i
          done
          echo "Failed to install expected version $VERSION"
          exit 1
